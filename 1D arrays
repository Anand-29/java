Maximum Element in an Array

You are playing the PUBG game and you entered into the Bootcamp. There you viewed the drop box which was filled with guns. you have to choose the biggest gun in the drop box. Find the biggest gun and you will get the chicken dinner.


Input Format:

Input consists of n+1 integers.

The first integer corresponds to ‘n’ , the size of the array.

The next ‘n’ integers correspond to the elements in the array. Assume that the maximum value of n is 15.

 

Output Format:

Refer sample output for details.

 

Sample Input 1:

5

2

3

6

8

1

 

Sample Output 1:

8 is the maximum element in the array

 

Input (stdin)

4
3
5
9
2


Output (stdout)

9 is the maximum element in the array

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

       Scanner s = new Scanner(System.in);

        int n = s.nextInt();

        int[] a = new int[n];

        for( int i = 0 ; i < n ; i++ )

            a[i] = s.nextInt();

        int max = a[0];

        for( int i = 1; i < n ; i++ ){

            if( a[i] > max )

                max = a[i];

        }

        System.out.println(max+" is the maximum element in the array");

    }

}

Sum of 2 arrays

Ramu have some number of Apples and he arrange that in a matrix format.

Raju have some another number of Apples. He also wants to arrange that in a matrix format.

Ragul wants to calculate the total number of apples. Help him to find out the total number of apples.


Input Format:

Input consists of 2n+1 integers. The first integer corresponds to ‘n’ , the size of the array.

The next ‘n’ integers correspond to the elements in the first array. The last 'n' integers correspond to the

elements in the second array. Assume that the maximum value of n is 15.

 

Output Format:

Refer sample output for details.

 

Sample Input:

5

2

3

6

8

1

1

1

1

1

1

 

Sample Output:

3 4 7 9 2

 

Input (stdin)

2
3
6
1
2


Output (stdout)

4
8

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

        Scanner in = new Scanner(System.in);

      int n = in.nextInt();

      int a1[] = new int[n];

      int a2[] = new int[n];

      for(int i = 0; i < n; i++)

          a1[i] = in.nextInt();

        for(int i = 0; i < n; i++)

          a2[i] = in.nextInt();

          int temp[] = new int[n];

          for(int i = 0; i < n; i++)

            temp[i] = a1[i] + a2[i];

      for(int i = 0; i < n; i++)

      System.out.println(temp[i]);

    }

}

Compatible array

Write a program to find whether 2 arrays are compatible or not.

Two arrays are said to be compatible if they are of the same size and if the ith element in the first array is greater

than or equal to the ith element in the second array for all the values of i.


INPUT FORMAT:

Input consists of 2n+1 integers. 

The first integer corresponds to ‘n’, the size of the array. 

The next ‘n’ integers correspond to the elements in the first array. 

The last 'n' integers correspond to the elements in the second array. 

Assume that the maximum value of n is 15.

 

OUTPUT FORMAT:

Refer sample output for details.

 

SAMPLE INPUT:

5

2

3

6

8

1

1

1

1

1

1

 

SAMPLE OUTPUT:

Compatible

 

Input (stdin)

5
2
3
6
8
1
1
1
1
1
2


Output (stdout)

Incompatible

 

Program :-

import java.util.*;

class Main

{

    public static void main (String[] args) 

    {

        Scanner sc=new Scanner(System.in);

    int i,c=0;

   int n=sc.nextInt();

   int arr1[]= new int[n];

   int arr2[]=new int[n];

    for(i=0;i<n;i++)

    {

        arr1[i]=sc.nextInt();

    }

    for(i=0;i<n;i++)

    {

        arr2[i]=sc.nextInt();

    }

    for(i=0;i<n;i++)

    {

        if(arr1[i]>=arr2[i])

        c=0;

        else

        c=1;

    }

    if(c==0)

    {

        System.out.println("Compatible");

    }

    else

    {

    System.out.println("Incompatible");

    }

}

}

Search an element

Arun's teacher gave him the following challenge. Help him solve it. "Given an array with 'n' elements by a user, you need to search if a particular element is present in the array or not. The element to be searched for is also given by the user"


Input Format:

Input consists of n+2 integers. 

The first integer corresponds to ‘n’, the size of the array. 

The next ‘n’ integers correspond to the elements in the array. 

The last integer corresponds to ‘a’, the element to be searched.

 

Output Format:

Refer to sample output for details.

 

Sample Input:

5

2

3

6

8

1

6

 

Sample Output:

6 is present in the array

 

Input (stdin)

5
2
3
6
8
1
9


Output (stdout)

9 is not present in the array

 

Program :-

import java.util.*;

class Main

{

  public static void main(String args[])

  {

    Scanner sc=new Scanner(System.in);

    int n=sc.nextInt();

    int arr[]=new int[n];

    int i,found=0;

    for(i=0;i<n;i++)

    {

      arr[i]=sc.nextInt();

    }

   int ele=sc.nextInt();

    for(i=0;i<n;i++)

    {

        if (arr[i]==ele)

        {

            System.out.printf("%d is present in the array", ele);

            found = 1;

        }

    }

    if (found==0)

        System.out.printf("%d is not present in the array", ele);

  } 

}

Sum of even numbers

Kuty and Pappu are playing a coding game. Kuty gives a set of numbers to Pappu to find the even numbers in the set and sum them. Write a program to help Pappu to solve the game and to win the dairy milk.


Input Format:

Input consists of n+1 integers. 

The first integer corresponds to ‘n’, the size of the array. 

The next ‘n’ integers correspond to the elements in the array. 

Assume that the maximum value of n is 15.

 

Output Format:

Refer to sample output for details.

 

Sample Input:

5

2

3

6

8

-1

 

Sample Output:

The sum of the even numbers in the array is 16

 

Input (stdin)

3
4
5
6


Output (stdout)

The sum of the even numbers in the array is 10

 

Program :-

import java.util.*;

class Main

{

public static void main (String[] args) 

{

    Scanner sc=new Scanner(System.in);

    int n=sc.nextInt();

    int arr[]=new int[n];

    int i,sum=0;

      for(i=0; i<n; i++)

        arr[i]=sc.nextInt();

    for(i=0; i<n; i++)

    {

        if(arr[i]%2==0)

            sum=sum+arr[i];

    }

    System.out.printf("The sum of the even numbers in the array is %d ",sum);       

}

}

Distinct elements

Write a program to find the number of distinct elements in an unsorted array. [Do it without sorting the array]


Input Input:

Input consists of n+1 integers. 

The first integer corresponds to n, the number of elements in the array. 

The next n integers correspond to the elements in the array. 

Assume that the maximum value of n is 15.

 

Output Format:

Output consists of a single integer which corresponds to the number of distinct elements in the array.

 

Sample Input:

5

3

2

3

780

90

 

Sample Output:

4

 

Input (stdin)

5
3
2
3
780
9


Output (stdout)

4

 

Program :-

import java.util.*;

class Main

{

    public static void main(String args[])

    {

        Scanner sc=new Scanner(System.in);

        int n=sc.nextInt();

        int c=0;

        int arr[]=new int[n];

        for(int i=0;i<n;i++)

        {

            arr[i]=sc.nextInt();

        }

        for(int i=0;i<n;i++)

        {

            int f=0;

            for(int j=0;j<n;j++)

            {

                if(i==j)

                    continue;

                if(arr[i]==arr[j] && (i>j))

                    f=1;  

            }

            if(f==0)

                c++;

        }

        System.out.printf("%d",c);

    }

}

Sum of even numbers and sum of odd numbers

Arun and Kalai were playing a puzzle game with a given set of numbers.

They need to find the odd and even numbers and find the sum of the odd numbers and the sum of the even numbers.

Write a program to help them to solve the puzzle game and to win the mobile phone.


Input Format:

Input consists of n+1 integers. 

The first integer corresponds to ‘n’, the size of the array. 

The next ‘n’ integers correspond to the elements in the array. 

Assume that the maximum value of n is 15.

 

Output Format:

Refer to sample output for details.

 

Sample Input:

5

2

3

6

8

-1

 

Sample Output:

The sum of the even numbers in the array is 16

The sum of the odd numbers in the array is 2

 

Input (stdin)

5
2
4
7
8
1


Output (stdout)

The sum of the even numbers in the array is 14
The sum of the odd numbers in the array is 8

 

Program :-

import java.util.*;

class Main

{

public static void main (String[] args)

{

    Scanner sc=new Scanner(System.in);

    int Size=sc.nextInt();

    int i;

    int a[]=new int[Size];

    int Even_Sum = 0, Odd_Sum = 0;

    for(i = 0; i < Size; i++)

    {

      a[i]=sc.nextInt();

    }

    for(i = 0; i < Size; i ++)

    {

        if(a[i] % 2 == 0)

        {

          Even_Sum = Even_Sum + a[i];

        }

        else

        {

          Odd_Sum = Odd_Sum + a[i];

        }

    }

    System.out.printf("The sum of the even numbers in the array is %d ", Even_Sum);

    System.out.printf("\nThe sum of the odd numbers in the array is %d ", Odd_Sum);

}

}

Compare two arrays

Given two arrays, you need to compare them and display if they are the same or not.


Input Format:

Input consists of 2n+1 integers. 

The first integer corresponds to ‘n’, the size of the array. 

The next ‘n’ integers correspond to the elements in the first array. 

The next ‘n’ integers correspond to the elements in the second array.

Assume that the maximum value of n is 15.

 

Output Format:

Print yes if the 2 arrays are the same. Print no if the 2 arrays are different.

 

Sample Input:

5

2

3

6

8

-1

2

3

6

8

-1

 

Sample Output:

yes

 

Input (stdin)

3
1
4
7
8
5
2


Output (stdout)

No

 

Program :-

import java.util.*;

class Main

{

public static void main (String[] args)

{

    Scanner sc=new Scanner(System.in);

    int n=sc.nextInt();

    int a[]=new int[n];

    int b[]=new int[n];

    int c=0;

    for(int i=0;i<n;i++)

    {

        a[i]=sc.nextInt();

    }

    for(int i=0;i<n;i++)

    {

        b[i]=sc.nextInt();

    }

    for(int i=0;i<n;i++)

    {   

        if(a[i]==b[i])

        {

            c++;

        }

    }

    if(c==n)

    {

        System.out.println("Yes");

    }

    else

    {

       System.out.println("No");  

    }

}

}

Array insertion

Arun and Ram were playing cards. Arun has 5 cards. Ram wants to insert a new card in between Arun's cards. Ram wants to find the position to insert the card. So help him to find the position to insert a certain card. If Ram inserts a card in a position other than the position of 5 cards, the game will be over. So play carefully. EXAMPLE: consider an array having three elements in it initially and a[0] = 1, a[1] = 2 and a[2] = 3 and you want to insert a number 45 at location 1 i.e. a[0] = 45, so we have to move elements one step below after insertion a[1] = 1 , and a[2] = 2 and a[3] = 3.


Input Format:

Assume that the maximum number of elements in the array is 20.

 

Output Format:

Refer to the sample input and output for formatting specifications.

 

Sample Input:

5

1

2

3

4

5

4

10

 

Sample Output:

Array after insertion is

1

2

3

10

4

5

 

Input (stdin)

4                                                                                                                                                
1                                                                                                                                               
4                                                                                                                                                
7                                                                                                                                               
5                                                                                                                                                
3                                                                                                                                                
10


Output (stdout)

1
4
10
7
5

 

Program :-

import java.util.*;

class Main

{

public static void main (String[] args) 

{

    Scanner sc=new Scanner(System.in);

    int n=sc.nextInt();

    int arr[]=new int[n];

    int i;

    for(i=0;i<n;i++)

   {

        arr[i]=sc.nextInt();

   }

    int pos,ele;

     pos=sc.nextInt();

    if (pos>n)

    {

        System.out.printf("Invalid Input\n");

    }

    else

    {        

         ele=sc.nextInt();        

        i=0;

        while(i<n)

        {

            if (i==pos-1)

            {

                System.out.printf("%d\n%d\n",ele,arr[i]);

            }

            else

            {

                System.out.printf("%d\n", arr[i]);

            }

            i=i+1;

        }

    }

}

}

Array deletion

Given an array with 'n' elements, Suresh wants to delete an element at a particular position in the array. Help him in deleting the element and displaying the updated array.


Input Format:

Assume that the maximum number of elements in the array is 20.

 

Output Format:

Refer to the sample input and output for formatting specifications.

 

Sample Input:

5

1

2

3

4

5

4

 

Sample Output:

Array after deletion is

1

2

3

5

 

Input (stdin)

5
1
2
3
4
5
4


Output (stdout)

Array after deletion is
1
2
3
5

 

Program :-

import java.util.*;

class Main

{

    public static void main(String args[])

    {

        Scanner sc=new Scanner(System.in);

        int n=sc.nextInt();

        int arr[]=new int[n];

        int pos,i;

        for(i=0;i<n;i++)

        {

            arr[i]=sc.nextInt();

        }

        pos=sc.nextInt();

        if (pos>n)

        {

            System.out.printf("Invalid Input");

        }

        else

        {

            System.out.printf("Array after deletion is\n");

            i=0;

            while(i<n)

            {

                if (i!=pos-1)

                    System.out.printf("%d\n", arr[i]);

                i++;

            }

        }       

    }

}

Array mean

Write a program to find the mean of the elements in an array.


Input Format:

Input consists of n+1 integers where n corresponds to the number of elements in the array.

The first integer corresponds to n and the next n integers correspond to the elements in the array.

Output consists of a double value which corresponds to the mean of the array and is printed up to 2 digits of precision.

Assume that the maximum number of elements in the array is 20.

 

Sample Output:

Refer to the sample input and output for formatting specifications.

 

Sample Input:

5

2

4

1

3

5

 

Sample Output:

The mean of the array is 3.00

 

Input (stdin)

3
2
5
8


Output (stdout)

The mean of the array is 5.00

 

Program :-

import java.util.*;

class Main

{

    public static void main (String[] args)

    {

        Scanner sc=new Scanner(System.in);

        int n=sc.nextInt();

        int a[]=new int[n];

        int i;

        float   mean = 0, sum = 0 ,avg=0;

        for (i=0;i<n;i++ )

        {

            a[i]=sc.nextInt();

        } 

        for (i=0;i<n;i++)

        {

            sum = sum + a[i] ;

            avg = sum / n ;

        } 

        System.out.printf("The mean of the array is %.2f ", avg) ;

    }

}

Array median

Write a program to find the median of the elements in the array. Median is the middle value in the sorted list. If there are an even number of elements in the list, the median is the mean of the 2 middle values.


Input Format:

Input consists of n+1 integers where n corresponds to the number of elements in the array.

The first integer corresponds to n and the next n integers correspond to the elements in the array.

Output consists of a double value which corresponds to the median of the array and is printed up to 2 digits of precision.

Assume that the maximum number of elements in the array is 20.

 

Output Format:

Refer sample input and output for formatting specifications.

 

Sample Input:

5

2

4

1

3

5

 

Sample Output:

The median of the array is 3.00

 

Input (stdin)

5
6
9
1
2
3


Output (stdout)

The median of the array is 3.00

 

Program :-

import java.util.*;

class Main

{

    public static void main(String args[])

    {

        Scanner sc=new Scanner(System.in);

        int n=sc.nextInt();

        int i,j,t;

        double median=0;

        int a[]=new int[n];

        for(i=0;i<n;i++)

        {

            a[i]=sc.nextInt();

        }

        for(i=0;i<n;i++)

        {

            for(j=1;j<n;j++)

            {

                if(a[i]>a[j])

                {

                    t=a[j];

                    a[j]=a[i];

                    a[i]=t;

                }

            }

        }

        if(n%2==1)

        {

            median=a[(n/2)+1];

        }

        else

        {

            if(n%2==0)

            {

                float  inter=a[n/2]+a[(n/2)+1];

                median =inter/2.0;

            }

        }

        System.out.printf("The median of the array is %.2f",median);

    }

}

Array Mode

Write a program to find the mode of the elements in the array.

The mode in a list of numbers refers to the list of numbers that occur most frequently.

It is important to note that there can be more than one mode and if no number occurs more than once in the set,

then there is no mode for that set of numbers.


Input Format:

Input consists of n+1 integers where n corresponds to the number of elements in the array.

The first integer corresponds to n and the next n integers correspond to the elements in the array.

Refer sample input and output for formatting specifications.

Assume that the maximum number of elements in the array is 20.

Assume that in the input data set there is 1 mode or no mode at all.

 

Sample Output:

All text in bold corresponds to input and the rest corresponds to output.

 

Sample Input:

5

2

4

1

3

5

 

Sample Output:

The mode of the array is none

 

Input (stdin)

3
6
9
2


Output (stdout)

The mode of the array is none

 

Program :-

import java.util.*;

class Main

{

    public static void main(String args[])

    {

    Scanner sc=new Scanner(System.in);

    int n=sc.nextInt();

    int arr[]=new int[n];

    int i,j,flag=0;

    for(i=0;i<n;i++)

    {

        arr[i]=sc.nextInt();

    }

    for(i=0;i<n;i++)

    {

        for(j=i+1;j<n;j++)

        {

            if(arr[j]==arr[i])

            {

                flag=1;

                System.out.printf("Mode=%d ",arr[i]);

            }

        }

    }

    if(flag==0)

    {

        System.out.printf("The mode of the array is none");

    }   

    }

}

Array Range

Write a program to find the range of the elements in the array. Range of an array is the difference between

the maximum and minimum element in an array,


Input Format:

Input consists of n+1 integers where n corresponds to the number of elements in the array.

The first integer corresponds to n and the next n integers correspond to the elements in the array.

Assume that the maximum number of elements in the array is 20.

 

Output Format:

Output consists of an integer which corresponds to the range of the array.

 

Sample Input:

5

2

4

1

3

5

 

Sample Output:

The range of the array is 4

 

Input (stdin)

3
5
6
4


Output (stdout)

The range of the array is 2

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

        Scanner s = new Scanner(System.in);

        int n = s.nextInt();

        int[] a = new int[n];

        for( int i = 0 ; i < n ; i++ )

            a[i] = s.nextInt();

        int max = a[0],low = a[0];

        for( int i = 0 ; i < n ; i++ ){

                if( a[i] > max)

                    max = a[i];

                if( a[i] < low )

                    low = a[i];

        }

        int range = max - low;

        System.out.println("The range of the array is "+range);     

}

}

Functions – Array Type

Write a program to find the type of array using functions. An array is said to be “Even” if all the elements

in the array are even. An array is said to be “Odd” if all the elements in the array are odd. An array is said to

 be “Mixed” if it contains some odd elements and some even elements. Refer function specifications for the

function details. The first argument corresponds to the number of elements in the array.

The second argument corresponds to the pointer to an array.

The return value of the function should be 1 if the array is Even.

The return value of the function should be 2 if the array is Odd.

The return value of the function should be 3 if the array is Mixed.


Input Format:

Input consists of n+1 integers where n corresponds to the number of elements in the array.

The first integer corresponds to n and the next n integers correspond to the elements in the array.

Assume that the maximum number of elements in the array is 20.

 

Sample Output:

Refer sample input and output for formatting specifications.

 

Sample Input:

5

2

4

1

3

5

 

Sample Output:

The array is Mixed

 

Input (stdin)

5
1
2
3
6
9


Output (stdout)

The array is Mixed

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

        Scanner s=new Scanner(System.in);

        int n,i,odd=0,even=0;

        n=s.nextInt();

        int a[]=new int[20];

        for(i=0;i<n;i++)

        {

            a[i]=s.nextInt();

        }

        for(i=0;i<n;i++)

        {

            if(a[i]%2==0)

            {

                even++;

            }

            else if(a[i]%2==1)

            {

                odd++;

            }

        }

        if(even==n)

        {

            System.out.println("The array is Even");

        }

        else if(odd==n)

        {

            System.out.println("The array is Odd");           

        }

        else

        {

            System.out.println("The array is Mixed");

        }

    }

}
