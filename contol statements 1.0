CONTROL STRUCTURES-I

Amoeba Multiplication

The environmental eco-club has discovered a new Amoeba that grows in the order of a Fibonacci series every month. They are exhibiting their amoeba in a national conference. They want to know the size of the amoeba at a particular time instant. If a particular month’s index is given, write a program to displays the amoeba’s size……??? For Example, The size of the amoeba on month 1, 2, 3, 4, 5, 6, ..will be 0, 1, 1, 2, 3, 5, 8 respectively.


Input format:

The first input containing an integer which denotes the number of the month

 

Output format:

Print the amoeba size.

 

Sample Input:

7

 

Sample Output:

8

Input (stdin)

13


Output (stdout)

144

 

Input (stdin)

4


Output (stdout)

2

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

       Scanner sc=new Scanner(System.in);

       int n=sc.nextInt();

       int a=0,b=1;

       int c=a+b;

       while(n!=3)

       {

           a=b;

           b=c;

           c=a+b;

           n--;

       }

       System.out.println(c);

    }

}

Factorial Number

Write a program to determine whether 'n' is a factorial number or not. Factorial of a number is the product of all positive numbers from 1 to 'n'.


Input format:

The input containing an integer 'n' which denotes the given number.

 

Output format:

If the given number is factorial, print "Yes". Otherwise, print "No".

 

Sample Input:

6

 

Sample Output:

Yes

Input (stdin)

24


Output (stdout)

Yes

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

        int n,fact=1,x=1;

        Scanner sc=new Scanner(System.in);

        n=sc.nextInt();

        while(fact<n)

    {

        x=x+1;

        fact=fact*x;

    }

if(fact==n)

{

    System.out.println("Yes");

}

    else

{

    System.out.println("No");

}

}

}

Lucas Sequence

a = 0, b=0, c=1 are the 1st three terms. All other terms in the Lucas sequence are generated by the sum of their 3 most recent predecessors. Write a program to generate the first n terms of a Lucas Sequence.


Input format:

The input containing an integer 'n' which denotes the given number

 

Output format:

Print the 'n' terms of the Lucas Sequence, separated by a single space. There are no leading or trailing spaces in the output.

 

Sample Input:

5

 

Sample Output:

0 0 1 1 2

Input (stdin)

6


Output (stdout)

0 0 1 1 2 4

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

        Scanner sc=new Scanner(System.in);

        int n=sc.nextInt();

        int a=0,b=0,c=1;

        System.out.printf("%d %d %d ",a,b,c);

        while(n!=3&&n>1)

        {

            int d=a+b+c;

            System.out.printf("%d ",d);

            a=b;

            b=c;

            c=d;

            n--;

        }       

    }

}

Collatz Problem

The rules for generating Collatz Sequence are: If n is even: n = n / 2 If n is odd: n = 3n + 1 For example, if the starting number is 5 the sequence is: 5 -> 16 -> 8 -> 4 -> 2 -> 1 It has been proved for almost all integers, the repeated application of the above rule will result in a sequence that ends at 1.


Input format:

The input containing an integer 'n' which denotes the given number

 

Output format:

Print the numbers in the sequence and also print the number of times the rule has to be applied in order to reach 1.

 

Sample Input:

5

 

Sample Output:

5

16

8

4

2

1

5

Input (stdin)

18


Output (stdout)

18
9
28
14
7
22
11
34
17
52
26
13
40
20
10
5
16
8
4
2
1
20

 

Input (stdin)

1


Output (stdout)

1
0

 

Input (stdin)

4


Output (stdout)

4
2
1
2

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

       Scanner sc=new Scanner(System.in);

       int a=sc.nextInt();

       int count=0;

       System.out.println(a);

       while(a!=1)

       {

           if(a%2==0){

               a=a/2;

               System.out.println(a);

               count++;

           }

           else

           {

               a=(3*a)+1;

               System.out.println(a);

               count++;

           }

       }

       System.out.println(count);

    }

}

Trendy Numbers

Write a program to check whether the given number is a trendy number or not. A number is said to be a trendy number if and only if it has 3 digits and the middle digit is divisible by 3.


Input format:

The input containing an integer 'n' which denotes the given number

 

Output format:

If the given number is a trendy number, then print "Trendy Number". Otherwise, print "Not a Trendy Number".

 

Sample Input:

791

 

Sample Output:

Trendy Number

Input (stdin)

3


Output (stdout)

Not a Trendy Number

 

Input (stdin)

45


Output (stdout)

Not a Trendy Number

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

       Scanner scan=new Scanner(System.in);

       int a=scan.nextInt();

       if(a>99 && a<=999){

            a=a%100;

            a=a/10;

           if(a%3==0){

               System.out.printf("Trendy Number");

           }else

           System.out.printf("Not a Trendy Number");

       }else

       System.out.printf("Not a Trendy Number");

    }

}

Viva on Odd Numbers

A maths teacher asks her students to give 3 examples for positive odd numbers. When the student specifies a correct answer, his/her score is incremented by 1. When the student specifies a positive even number, his/her score is decremented by 0.5. When the student specifies a negative number, he/she will not be given any more chances to correct his or her mistake and his/her score will be decremented by 1. So a student's turn comes to an end when he/she has correctly specified 3 positive odd numbers or when the student has specified a negative number. Few students didn't know the difference between odd numbers and even numbers and they made many mistakes and so it was difficult for the teacher to maintain the scores. The teacher asks for your help. Can you please help her by writing a program to calculate the score?


Input Format:

Input consists of a list of integers.

 

Output Format:

Output consists of a single line. The score needs to be displayed correct to 1 decimal place. Refer sample output for details.

[For this exercise, don't worry about duplicate odd numbers. Even if the students specifies the same odd number thrice, it is accepted].

 

Sample Input 1:

1

3

5

 

Sample Output 1:

3.0

 

Input (stdin)

2
-4


Output (stdout)

-1.5

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

        float mark=0;

        int count=0;

        int n=0;

        Scanner scan=new Scanner(System.in);

        //n=scan.nextInt();

        while(n>=0){

            if(count==3)

            {

                break;

            }

            n=scan.nextInt();

            if(n%2!=0 && n>=0)

            {

                ++mark;

                ++count;    

            }

          else if(n<0)

          {

              mark=(float)(mark-1);

           }

          else

           {

              mark=(float)(mark-0.5);

           }

        }

        System.out.printf("%.1f",mark);

        //System.out.println(count);   

    }

}

Kaprekar Number

Consider an n-digit number k. Square it and add the right n digits to the left n or n-1 digits. If the resultant sum is k, then k is called a Kaprekar number. For example, 9 is a Kaprekar number since 92 = 81 & 8+1=9. and 297 is a Kaprekar number since 2972 = 88209 & 88+209 = 297


Input Format:

Input consists of a single integer.

 

Output Format:

Refer sample output for details.

 

Sample Input:

9

 

Sample Output:

Kaprekar Number

 

Input (stdin)

101


Output (stdout)

Not a Kaprekar Number

 

Program :-

import java.util.*;

class Main

{

    public static void main(String args[])

    {

      Scanner sc =new Scanner(System.in);

      int num = sc.nextInt();

      int p = 0;

      int digit=0,sq,sum=0;

      sq = num*num;

      p=sq;

      while(sq>0)

      {

        digit++;

        sq = sq/10;

      }

      int k =(int)Math.pow(10,(digit/2));

      while(p>0)

      {

        sum = sum+(p%k);

        p=p/k;

      }

      if(sum==num){

        System.out.println("Kaprekar Number");

      }

      else{

        System.out.println("Not a Kaprekar Number");

      }

    }

}

Target Practice

Drona normally trains his disciples using a board which consists of concentric circles. When the student correctly hits the center of the concentric circles, his score is 100. The score gets reduced depending on where the students hit on the board. When the student hits outside the board, his score is 0. Drona will not allow a student to have his food unless he scores 100. Arjuna will always hit the target in his first attempt and he will leave early. Others may take more turns to reach a score of 100. Can you write a program to determine the number of turns a disciple takes to reach the target score of 'n'?


Input Format:

Input consists of a list of positive integers. The first integer corresponds to the target score 'n'. Assume that all the other integers input are less than or equal to n.

 

Output Format:

Output consists of a single line. Refer sample output for format details.

 

Sample Input:

100

4

40

60

 

Sample Output 1:

The number of turns is 3

 

Input (stdin)

100
4
40
60


Output (stdout)

The number of turns is 3

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

        int sum=0,n,count=0;

        Scanner scan=new Scanner(System.in);

        int a=scan.nextInt();

        while(sum<a){

            n=scan.nextInt();

            sum=sum+n;

            count++;

        }

        System.out.println("The number of turns is "+count);

    }

}

Data Mining

In the University Examinations conducted during the past 5 years, the toppers registration numbers were 7126, 82417914, 7687 and 6657. Your father is an expert in data mining and he could easily infer a pattern in the toppers registration numbers. In all the registration numbers listed here, the sum of the odd digits is equal to the sum of the even digits in the number. He termed the numbers that satisfy this property as Probable Topper Numbers. Write a program to find whether a given number is a probable topper number or not.


Input Format:

Input consists of a single integer.

 

Output Format:

Output consists of a single line. Refer sample output for details.

 

Sample Input:

143

 

Sample Output:

yes

 

Input (stdin)

344


Output (stdout)

No

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

        int even=0,odd=0;

        Scanner scan=new Scanner(System.in);

        int n=scan.nextInt();

        while(n!=0){

            int b=n%10;

            if(b%2==0){

                even=even+b;

            }else

            odd=odd+b;

            n=n/10;

        }

        if(even==odd){

            System.out.println("yes");

        }else

        System.out.println("No");

    }

}

SPECIAL NUMBER

Write a program to find all special numbers between 2 limits m and n(both inclusive). Assume that m and n are 2-digit numbers. A 2-digit number is said to be a special number if the sum of its digits and the products of its digits is equal to the number itself. For example, 19 is a special number. The digits in 19 are 1 and 9. The sum of the digits is 10 and the product of the digits is 9. 10+9 = 19.


Input Format:

Input consists of 2 integers m and n.

 

Output Format:

Refer Sample Output .

 

Sample Input:

11

30

 

Sample Output:

19

29

Input (stdin)

20
60


Output (stdout)

29
39
49
59

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

        Scanner s=new Scanner(System.in);

        int m,n,i,b,c,d,e,f,t;

        m=s.nextInt();

        n=s.nextInt();

        for(i=m;i<=n;i++)

        {

            t=i;

             b=i%10;

             c=i/10;

            d=b+c;

            e=b*c;

            f=d+e;

            if(f==t)

            {

                System.out.println(f);

            }

        }

    }

}

Print continous number

Write a program to print all numbers between a and b (a and b inclusive) using a while loop.


Input Format:

Input consists of 2 integers. The first integer corresponds to a and the second integer corresponds to b. Assume a>=b.

 

Output Format:

Refer Sample Input and Output for formatting specifications.

 

Sample Input :

4

10

 

Sample Output:

4

5

6

7

8

9

10

Input (stdin)

5
12


Output (stdout)

5
6
7
8
9
10
11
12

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

      Scanner s=new Scanner(System.in);

      int i;

      int l=s.nextInt();

      int u=s.nextInt();

      for(i=l;i<=u;i++)

      {

          System.out.println(i);

      }

    }

}

Print the number in reverse

Write a Java program to print all numbers between a and b (a and b inclusive) using while loop.


Input Format:

Input consists of 2 integers. The first integer corresponds to a and the second integer corresponds to b. Assume a>=b.

 

Output Format:

Refer Sample Input and Output for formatting specifications.

 

Sample Input :

10

4

 

Sample Output:

10

9

8

7

6

5

4

Input (stdin)

8
2


Output (stdout)

8
7
6
5
4
3
2

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

        Scanner s=new Scanner(System.in);

        int a=s.nextInt();

        int b=s.nextInt();

        int c=a;

       while(b<=a)

        {

            System.out.println(c);

            c--;

            b++;

        }

    }

}

Count positive and negative

Write a program that allows the user to enter 'n' numbers and finds the number of positive numbers entered and the number of negative numbers entered using a loop.


Input Format:

Input consists of n+1 integers. The first integer corresponds to n. The next n integers correspond to the numbers to be added. Consider 0 to be a positive number.

 

Output Format:

Refer Sample Input and Output for formatting specifications.

 

Sample Input:

4

5

-2

-1

6

 

Sample Output:

Number of positive numbers entered is 2 and the sum is 1

Input (stdin)

5
-8
-9
5
-6
2


Output (stdout)

Number of positive numbers is 2 and the number of negative numbers is 3

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

        Scanner s=new Scanner(System.in);

        int a[]=new int[20];

        int n=s.nextInt();

        int count=0,i,count1=0;

        for(i=0;i<n;i++)

        {

            a[i]=s.nextInt();

        }

        for(i=0;i<n;i++)

        {

        if(a[i]>=0)

        {

            count++;

        }

        else

        {

          count1++;

        }

        }

        System.out.println("Number of positive numbers is "+count+" and the number of negative numbers is "+count1);

    }

}

Multiplication Table

Write a program to print the multiplication table of an integer n up to m rows using loop.


Input Format:

Input consists of 2 integers. The first integer corresponds to n. The second integer corresponds to m.

 

Output Format:

Refer Sample Input and Output for formatting specifications.

 

Sample Input:

5

4

 

Sample Output:

The multiplication table of 5 is

1*5=5

2*5=10

3*5=15

4*5=20

Input (stdin)

2
5


Output (stdout)

1*2=2
2*2=4
3*2=6
4*2=8
5*2=10

 

Input (stdin)

3
2


Output (stdout)

1*3=3
2*3=6

 

Program :-

import java.util.Scanner;

class Main

{

    public static void main(String args[])

    {

        Scanner sc=new Scanner(System.in);

        int n=sc.nextInt();

        int m=sc.nextInt();

        for(int i=1;i<=m;i++)

        {

            System.out.println(i+"*"+n+"="+n*i);

        }

    }      

}
